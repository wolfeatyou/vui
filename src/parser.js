// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Program: peg$parseProgram };
  var peg$startRuleFunction = peg$parseProgram;

  var peg$c0 = "#";
  var peg$c1 = "end";
  var peg$c2 = "define";
  var peg$c3 = "type";
  var peg$c4 = "[]";
  var peg$c5 = "pipe";
  var peg$c6 = "parameters";
  var peg$c7 = "script";
  var peg$c8 = "flow";
  var peg$c9 = "action";
  var peg$c10 = "function";
  var peg$c11 = "(";
  var peg$c12 = ")";
  var peg$c13 = ":";
  var peg$c14 = ",";
  var peg$c15 = "component";
  var peg$c16 = "instance";
  var peg$c17 = "from";
  var peg$c18 = "container";
  var peg$c19 = "width";
  var peg$c20 = "height";
  var peg$c21 = "px";
  var peg$c22 = "pc";
  var peg$c23 = "content";
  var peg$c24 = "button";
  var peg$c25 = "field";
  var peg$c26 = "table";
  var peg$c27 = "title";
  var peg$c28 = "columns";
  var peg$c29 = "column";
  var peg$c30 = "property";
  var peg$c31 = "const";
  var peg$c32 = "\"";
  var peg$c33 = "\n";
  var peg$c34 = "\r\n";
  var peg$c35 = "\r";

  var peg$r0 = /^[^\r\n]/;
  var peg$r1 = /^[a-zA-Z0-9_]/;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[a-zA-Z_]/;
  var peg$r4 = /^[^"]/;
  var peg$r5 = /^[ \t\v\f]/;

  var peg$e0 = peg$literalExpectation("#", false);
  var peg$e1 = peg$classExpectation(["\r", "\n"], true, false);
  var peg$e2 = peg$literalExpectation("end", false);
  var peg$e3 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e4 = peg$literalExpectation("define", false);
  var peg$e5 = peg$literalExpectation("type", false);
  var peg$e6 = peg$literalExpectation("[]", false);
  var peg$e7 = peg$literalExpectation("pipe", false);
  var peg$e8 = peg$literalExpectation("parameters", false);
  var peg$e9 = peg$literalExpectation("script", false);
  var peg$e10 = peg$literalExpectation("flow", false);
  var peg$e11 = peg$anyExpectation();
  var peg$e12 = peg$literalExpectation("action", false);
  var peg$e13 = peg$literalExpectation("function", false);
  var peg$e14 = peg$literalExpectation("(", false);
  var peg$e15 = peg$literalExpectation(")", false);
  var peg$e16 = peg$literalExpectation(":", false);
  var peg$e17 = peg$literalExpectation(",", false);
  var peg$e18 = peg$literalExpectation("component", false);
  var peg$e19 = peg$literalExpectation("instance", false);
  var peg$e20 = peg$literalExpectation("from", false);
  var peg$e21 = peg$literalExpectation("container", false);
  var peg$e22 = peg$literalExpectation("width", false);
  var peg$e23 = peg$literalExpectation("height", false);
  var peg$e24 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e25 = peg$literalExpectation("px", false);
  var peg$e26 = peg$literalExpectation("pc", false);
  var peg$e27 = peg$literalExpectation("content", false);
  var peg$e28 = peg$literalExpectation("button", false);
  var peg$e29 = peg$literalExpectation("field", false);
  var peg$e30 = peg$literalExpectation("table", false);
  var peg$e31 = peg$literalExpectation("title", false);
  var peg$e32 = peg$literalExpectation("columns", false);
  var peg$e33 = peg$literalExpectation("column", false);
  var peg$e34 = peg$literalExpectation("property", false);
  var peg$e35 = peg$literalExpectation("const", false);
  var peg$e36 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  var peg$e37 = peg$literalExpectation("\"", false);
  var peg$e38 = peg$classExpectation(["\""], true, false);
  var peg$e39 = peg$classExpectation([" ", "\t", "\v", "\f"], false, false);
  var peg$e40 = peg$literalExpectation("\n", false);
  var peg$e41 = peg$literalExpectation("\r\n", false);
  var peg$e42 = peg$literalExpectation("\r", false);

  var peg$f0 = function(statements) {
      return {
        type: "Program",
        statements: statements.filter(s => s !== null)
      };
    };
  var peg$f1 = function() {
      return null; // Ignore comments in the AST
    };
  var peg$f2 = function(name, fields) {
      return {
        type: "TypeDefinition",
        name: name,
        fields: fields.filter(f => f !== null)
      };
    };
  var peg$f3 = function(name, typeName) {
      return {
        type: "TypeField",
        name: name,
        fieldType: typeName
      };
    };
  var peg$f4 = function(name) {
      return {
        typeName: name,
        isArray: true
      };
    };
  var peg$f5 = function(name) {
      return {
        typeName: name,
        isArray: false
      };
    };
  var peg$f6 = function(name, params, script) {
      return {
        type: "PipeDefinition",
        name: name,
        parameters: params ? params[2] : [],
        script: script ? script[2] : null
      };
    };
  var peg$f7 = function(params) {
      return params.filter(p => p !== null);
    };
  var peg$f8 = function(name, typeName) {
      return {
        type: "ParameterDefinition",
        name: name,
        paramType: typeName
      };
    };
  var peg$f9 = function(code) {
      return code.trim();
    };
  var peg$f10 = function(name, params, code, func) {
      return {
        type: "ActionDefinition",
        name: name,
        parameters: params ? params[2] : [],
        script: code ? code[2] : null,
        function: func
      };
    };
  var peg$f11 = function(name, params, body) {
      return {
        name: name,
        params: params,
        body: body.trim()
      };
    };
  var peg$f12 = function(name) {
      return {
        name: name,
        type: type
      };
    };
  var peg$f13 = function(name) {
      return {
        name: name,
        type: type
      };
    };
  var peg$f14 = function(name, props) {
      return {
        type: "ComponentTypeDefinition",
        name: name,
        properties: props.filter(p => p !== null)
      };
    };
  var peg$f15 = function(name, value) {
      return {
        type: "ComponentProperty",
        name: name,
        value: value
      };
    };
  var peg$f16 = function(name, props) {
      return {
        type: "ComponentSubtype",
        name: name,
        properties: props.filter(p => p !== null)
      };
    };
  var peg$f17 = function(name, flows, ui) {
      return {
        type: "ComponentInstanceDefinition",
        name: name,
        flows: flows.filter(f => f !== null),
        ui: ui
      };
    };
  var peg$f18 = function(typeName, name, source) {
      return {
        type: "FlowDefinition",
        flowType: typeName,
        name: name,
        source: source
      };
    };
  var peg$f19 = function(sourceType, source, args) {
      return {
        type: "FlowSource",
        sourceType: sourceType,
        source: source,
        args: args
      };
    };
  var peg$f20 = function(attrs) {
      return {
        type: "Container",
        attributes: attrs.filter(a => a !== null)
      };
    };
  var peg$f21 = function(name, value) {
      return {
        type: "DimensionAttribute",
        name: name,
        value: value
      };
    };
  var peg$f22 = function(value) {
      return value;
    };
  var peg$f23 = function(value, unit) {
      return {
        type: "Dimension",
        value: parseInt(value, 10),
        unit: unit
      };
    };
  var peg$f24 = function(value) {
      return {
        type: "Number",
        value: parseInt(value, 10)
      };
    };
  var peg$f25 = function(elements) {
      return {
        type: "ContentAttribute",
        elements: elements.filter(e => e !== null)
      };
    };
  var peg$f26 = function(attrs) {
      return {
        type: "Button",
        attributes: attrs.filter(a => a !== null)
      };
    };
  var peg$f27 = function(attrs) {
      return {
        type: "Field",
        subtype: subtype,
        attributes: attrs.filter(a => a !== null)
      };
    };
  var peg$f28 = function(attrs) {
      return {
        type: "Table",
        attributes: attrs.filter(a => a !== null)
      };
    };
  var peg$f29 = function(value) {
      return {
        type: "Attribute",
        name: "flow",
        value: value
      };
    };
  var peg$f30 = function(value) {
      return {
        type: "Attribute",
        name: "title",
        value: value
      };
    };
  var peg$f31 = function(columns) {
      return {
        type: "ColumnsAttribute",
        columns: columns.filter(c => c !== null)
      };
    };
  var peg$f32 = function(attrs) {
      return {
        type: "Column",
        subtype: subtype,
        attributes: attrs.filter(a => a !== null)
      };
    };
  var peg$f33 = function(name, value) {
      return {
        type: "Attribute",
        name: name,
        value: value
      };
    };
  var peg$f34 = function(actions) {
      return {
        type: "ActionAttribute",
        actions: actions.filter(a => a !== null)
      };
    };
  var peg$f35 = function(name, params) {
      return {
        type: "ActionOperation",
        name: name,
        params: params.filter(p => p !== null)
      };
    };
  var peg$f36 = function(name, value) {
      return {
        name: name,
        value: value
      };
    };
  var peg$f37 = function(name, value) {
      return {
        name: name,
        value: value
      };
    };
  var peg$f38 = function(value, property) {
        return {
          type: "NamedFlowReference",
          flowName: value,
          property: property ? property[2] : null
        };
      };
  var peg$f39 = function(property) {
        return {
          type: "DefaultFlowReference",
          property: property ? property[2] : null
        };
      };
  var peg$f40 = function(value) {
        return {
          type: "ConstReference",
          value: value
        };
      };
  var peg$f41 = function(source) {
      return {
        type: "FlowReference",
        source: source
      };
    };
  var peg$f42 = function(name) {
      return name;
    };
  var peg$f43 = function(value) {
      return value;
    };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseProgram() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = [];
    s3 = peg$parseComment();
    if (s3 === peg$FAILED) {
      s3 = peg$parseStatement();
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseComment();
      if (s3 === peg$FAILED) {
        s3 = peg$parseStatement();
      }
    }
    s3 = peg$parse__();
    peg$savedPos = s0;
    s0 = peg$f0(s2);

    return s0;
  }

  function peg$parseStatement() {
    var s0;

    s0 = peg$parseTypeDefinition();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePipeDefinition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseActionDefinition();
        if (s0 === peg$FAILED) {
          s0 = peg$parseComponentTypeDefinition();
          if (s0 === peg$FAILED) {
            s0 = peg$parseComponentInstanceDefinition();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
      s3 = peg$parseEOL();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEndKeyword() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 3) === peg$c1) {
      s2 = peg$c1;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeDefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 6) === peg$c2) {
      s2 = peg$c2;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 4) === peg$c3) {
        s4 = peg$c3;
        peg$currPos += 4;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseIdentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = [];
          s9 = peg$parseTypeField();
          if (s9 === peg$FAILED) {
            s9 = peg$parseComment();
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$parseTypeField();
            if (s9 === peg$FAILED) {
              s9 = peg$parseComment();
            }
          }
          s9 = peg$parse__();
          s10 = peg$parseEndKeyword();
          if (s10 !== peg$FAILED) {
            s11 = peg$parse__();
            peg$savedPos = s0;
            s0 = peg$f2(s6, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeField() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseEndKeyword();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseTypeName();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseEOL();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f3(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeName() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c4) {
        s2 = peg$c4;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f4(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f5(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsePipeDefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 6) === peg$c2) {
      s2 = peg$c2;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 4) === peg$c5) {
        s4 = peg$c5;
        peg$currPos += 4;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseIdentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$currPos;
          if (input.substr(peg$currPos, 10) === peg$c6) {
            s9 = peg$c6;
            peg$currPos += 10;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse__();
            s11 = peg$parseParameterBlock();
            if (s11 !== peg$FAILED) {
              s9 = [s9, s10, s11];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse__();
          s10 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c7) {
            s11 = peg$c7;
            peg$currPos += 6;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse__();
            s13 = peg$parseScriptBlock();
            s11 = [s11, s12, s13];
            s10 = s11;
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          if (s10 === peg$FAILED) {
            s10 = null;
          }
          s11 = peg$parse__();
          s12 = peg$parseEndKeyword();
          if (s12 !== peg$FAILED) {
            s13 = peg$parse__();
            peg$savedPos = s0;
            s0 = peg$f6(s6, s8, s10);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParameterBlock() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseParameterDefinition();
    if (s2 === peg$FAILED) {
      s2 = peg$parseComment();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseParameterDefinition();
      if (s2 === peg$FAILED) {
        s2 = peg$parseComment();
      }
    }
    s2 = peg$parse__();
    s3 = peg$parseEndKeyword();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      peg$savedPos = s0;
      s0 = peg$f7(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParameterDefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 4) === peg$c8) {
        s4 = peg$c8;
        peg$currPos += 4;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseTypeName();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parseEOL();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f8(s2, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseScriptBlock() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 3) === peg$c1) {
      s5 = peg$c1;
      peg$currPos += 3;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    peg$silentFails--;
    if (s5 === peg$FAILED) {
      s4 = undefined;
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c1) {
        s5 = peg$c1;
        peg$currPos += 3;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    s1 = input.substring(s1, peg$currPos);
    peg$savedPos = s0;
    s1 = peg$f9(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseActionDefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 6) === peg$c2) {
      s2 = peg$c2;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 6) === peg$c9) {
        s4 = peg$c9;
        peg$currPos += 6;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseIdentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$currPos;
          if (input.substr(peg$currPos, 10) === peg$c6) {
            s9 = peg$c6;
            peg$currPos += 10;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse__();
            s11 = peg$parseParameterBlock();
            if (s11 !== peg$FAILED) {
              s9 = [s9, s10, s11];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse__();
          s10 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c7) {
            s11 = peg$c7;
            peg$currPos += 6;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse__();
            s13 = peg$parseScriptBlock();
            s14 = peg$parse__();
            s15 = peg$parseEndKeyword();
            if (s15 !== peg$FAILED) {
              s11 = [s11, s12, s13, s14, s15];
              s10 = s11;
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          if (s10 === peg$FAILED) {
            s10 = null;
          }
          s11 = peg$parse__();
          s12 = peg$parseFunctionBlock();
          if (s12 === peg$FAILED) {
            s12 = null;
          }
          s13 = peg$parse__();
          s14 = peg$parseEndKeyword();
          if (s14 !== peg$FAILED) {
            s15 = peg$parse__();
            peg$savedPos = s0;
            s0 = peg$f10(s6, s8, s10, s12);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionBlock() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c11;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = [];
          s8 = peg$parseFunctionParam();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseFunctionParam();
          }
          s8 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 41) {
            s9 = peg$c12;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse__();
            s11 = peg$currPos;
            s12 = [];
            s13 = peg$currPos;
            s14 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 3) === peg$c1) {
              s15 = peg$c1;
              peg$currPos += 3;
            } else {
              s15 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            peg$silentFails--;
            if (s15 === peg$FAILED) {
              s14 = undefined;
            } else {
              peg$currPos = s14;
              s14 = peg$FAILED;
            }
            if (s14 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s15 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
              if (s15 !== peg$FAILED) {
                s14 = [s14, s15];
                s13 = s14;
              } else {
                peg$currPos = s13;
                s13 = peg$FAILED;
              }
            } else {
              peg$currPos = s13;
              s13 = peg$FAILED;
            }
            while (s13 !== peg$FAILED) {
              s12.push(s13);
              s13 = peg$currPos;
              s14 = peg$currPos;
              peg$silentFails++;
              if (input.substr(peg$currPos, 3) === peg$c1) {
                s15 = peg$c1;
                peg$currPos += 3;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              peg$silentFails--;
              if (s15 === peg$FAILED) {
                s14 = undefined;
              } else {
                peg$currPos = s14;
                s14 = peg$FAILED;
              }
              if (s14 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s15 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e11); }
                }
                if (s15 !== peg$FAILED) {
                  s14 = [s14, s15];
                  s13 = s14;
                } else {
                  peg$currPos = s13;
                  s13 = peg$FAILED;
                }
              } else {
                peg$currPos = s13;
                s13 = peg$FAILED;
              }
            }
            s11 = input.substring(s11, peg$currPos);
            peg$savedPos = s0;
            s0 = peg$f11(s3, s7, s11);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionParam() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c13;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseIdentifier();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c14;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f12(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c13;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIdentifier();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f13(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseComponentTypeDefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 6) === peg$c2) {
      s2 = peg$c2;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 9) === peg$c15) {
        s4 = peg$c15;
        peg$currPos += 9;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        if (input.substr(peg$currPos, 4) === peg$c3) {
          s6 = peg$c3;
          peg$currPos += 4;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parseIdentifier();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s10 = [];
            s11 = peg$parseComponentProperty();
            if (s11 === peg$FAILED) {
              s11 = peg$parseComment();
            }
            while (s11 !== peg$FAILED) {
              s10.push(s11);
              s11 = peg$parseComponentProperty();
              if (s11 === peg$FAILED) {
                s11 = peg$parseComment();
              }
            }
            s11 = peg$parse__();
            s12 = peg$parseEndKeyword();
            if (s12 !== peg$FAILED) {
              s13 = peg$parse__();
              peg$savedPos = s0;
              s0 = peg$f14(s8, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComponentProperty() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parsePropertyValue();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseEOL();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f15(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        s4 = [];
        s5 = peg$parseComponentProperty();
        if (s5 === peg$FAILED) {
          s5 = peg$parseComment();
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseComponentProperty();
          if (s5 === peg$FAILED) {
            s5 = peg$parseComment();
          }
        }
        s5 = peg$parse__();
        s6 = peg$parseEndKeyword();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f16(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsePropertyValue() {
    var s0;

    s0 = peg$parseStringLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTypeName();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumber();
      }
    }

    return s0;
  }

  function peg$parseComponentInstanceDefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 6) === peg$c2) {
      s2 = peg$c2;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (input.substr(peg$currPos, 9) === peg$c15) {
        s4 = peg$c15;
        peg$currPos += 9;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        if (input.substr(peg$currPos, 8) === peg$c16) {
          s6 = peg$c16;
          peg$currPos += 8;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parseIdentifier();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s10 = [];
            s11 = peg$parseFlowDefinition();
            if (s11 === peg$FAILED) {
              s11 = peg$parseComment();
            }
            while (s11 !== peg$FAILED) {
              s10.push(s11);
              s11 = peg$parseFlowDefinition();
              if (s11 === peg$FAILED) {
                s11 = peg$parseComment();
              }
            }
            s11 = peg$parse__();
            s12 = peg$parseUIElement();
            if (s12 !== peg$FAILED) {
              s13 = peg$parse__();
              s14 = peg$parseEndKeyword();
              if (s14 !== peg$FAILED) {
                s15 = peg$parse__();
                peg$savedPos = s0;
                s0 = peg$f17(s8, s10, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFlowDefinition() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 4) === peg$c8) {
      s2 = peg$c8;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parseTypeName();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseIdentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parseFlowSource();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse__();
          s10 = peg$parseEOL();
          if (s10 === peg$FAILED) {
            s10 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f18(s4, s6, s8);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFlowSource() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.substr(peg$currPos, 4) === peg$c5) {
        s3 = peg$c5;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c8) {
          s3 = peg$c8;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = [];
          s8 = peg$parseIdentifier();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseIdentifier();
          }
          peg$savedPos = s0;
          s0 = peg$f19(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUIElement() {
    var s0;

    s0 = peg$parseContainer();
    if (s0 === peg$FAILED) {
      s0 = peg$parseButton();
      if (s0 === peg$FAILED) {
        s0 = peg$parseField();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTable();
        }
      }
    }

    return s0;
  }

  function peg$parseContainer() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 9) === peg$c18) {
      s2 = peg$c18;
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = [];
      s5 = peg$parseContainerAttribute();
      if (s5 === peg$FAILED) {
        s5 = peg$parseComment();
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseContainerAttribute();
        if (s5 === peg$FAILED) {
          s5 = peg$parseComment();
        }
      }
      s5 = peg$parse__();
      s6 = peg$parseEndKeyword();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f20(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseContainerAttribute() {
    var s0;

    s0 = peg$parseDimensionAttribute();
    if (s0 === peg$FAILED) {
      s0 = peg$parseContentAttribute();
    }

    return s0;
  }

  function peg$parseDimensionAttribute() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 5) === peg$c19) {
      s2 = peg$c19;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c20) {
        s2 = peg$c20;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parseDimensionValue();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseEOL();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f21(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDimensionValue() {
    var s0, s1;

    s0 = peg$parseNumber();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseStringLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f22(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c21) {
        s2 = peg$c21;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c22) {
          s2 = peg$c22;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f23(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f24(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseContentAttribute() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 7) === peg$c23) {
      s2 = peg$c23;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = [];
      s5 = peg$parseUIElement();
      if (s5 === peg$FAILED) {
        s5 = peg$parseComment();
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseUIElement();
        if (s5 === peg$FAILED) {
          s5 = peg$parseComment();
        }
      }
      s5 = peg$parse__();
      s6 = peg$parseEndKeyword();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f25(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseButton() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 6) === peg$c24) {
      s2 = peg$c24;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = [];
      s5 = peg$parseElementAttribute();
      if (s5 === peg$FAILED) {
        s5 = peg$parseComment();
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseElementAttribute();
        if (s5 === peg$FAILED) {
          s5 = peg$parseComment();
        }
      }
      s5 = peg$parse__();
      s6 = peg$parseEndKeyword();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f26(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseField() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 5) === peg$c25) {
      s2 = peg$c25;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c13;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse__();
      s5 = [];
      s6 = peg$parseElementAttribute();
      if (s6 === peg$FAILED) {
        s6 = peg$parseComment();
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parseElementAttribute();
        if (s6 === peg$FAILED) {
          s6 = peg$parseComment();
        }
      }
      s6 = peg$parse__();
      s7 = peg$parseEndKeyword();
      if (s7 !== peg$FAILED) {
        s8 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f27(s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTable() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 5) === peg$c26) {
      s2 = peg$c26;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = [];
      s5 = peg$parseTableAttribute();
      if (s5 === peg$FAILED) {
        s5 = peg$parseComment();
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseTableAttribute();
        if (s5 === peg$FAILED) {
          s5 = peg$parseComment();
        }
      }
      s5 = peg$parse__();
      s6 = peg$parseEndKeyword();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f28(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTableAttribute() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 4) === peg$c8) {
      s2 = peg$c8;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parseIdentifier();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseEOL();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f29(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (input.substr(peg$currPos, 5) === peg$c27) {
        s2 = peg$c27;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        s4 = peg$parseStringLiteral();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          s6 = peg$parseEOL();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f30(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse__();
        if (input.substr(peg$currPos, 7) === peg$c28) {
          s2 = peg$c28;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          s4 = [];
          s5 = peg$parseColumn();
          if (s5 === peg$FAILED) {
            s5 = peg$parseComment();
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseColumn();
            if (s5 === peg$FAILED) {
              s5 = peg$parseComment();
            }
          }
          s5 = peg$parse__();
          s6 = peg$parseEndKeyword();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            peg$savedPos = s0;
            s0 = peg$f31(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseColumn() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 6) === peg$c29) {
      s2 = peg$c29;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c13;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse__();
      s5 = [];
      s6 = peg$parseElementAttribute();
      if (s6 === peg$FAILED) {
        s6 = peg$parseComment();
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parseElementAttribute();
        if (s6 === peg$FAILED) {
          s6 = peg$parseComment();
        }
      }
      s6 = peg$parse__();
      s7 = peg$parseEndKeyword();
      if (s7 !== peg$FAILED) {
        s8 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f32(s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseElementAttribute() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseEndKeyword();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseAttributeValue();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseEOL();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f33(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (input.substr(peg$currPos, 6) === peg$c9) {
        s2 = peg$c9;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        s4 = [];
        s5 = peg$parseActionOperation();
        if (s5 === peg$FAILED) {
          s5 = peg$parseComment();
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseActionOperation();
          if (s5 === peg$FAILED) {
            s5 = peg$parseComment();
          }
        }
        s5 = peg$parse__();
        s6 = peg$parseEndKeyword();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f34(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseActionOperation() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = [];
      s5 = peg$parseActionParam();
      if (s5 === peg$FAILED) {
        s5 = peg$parseComment();
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseActionParam();
        if (s5 === peg$FAILED) {
          s5 = peg$parseComment();
        }
      }
      s5 = peg$parse__();
      s6 = peg$parseEndKeyword();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f35(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseActionParam() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parseStringLiteral();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseEOL();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f36(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        s4 = peg$parseIdentifier();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          s6 = peg$parseEOL();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f37(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseAttributeValue() {
    var s0;

    s0 = peg$parseStringLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFlowReference();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIdentifier();
        }
      }
    }

    return s0;
  }

  function peg$parseFlowReference() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$currPos;
      s4 = peg$parseStringLiteral();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        if (input.substr(peg$currPos, 4) === peg$c8) {
          s6 = peg$c8;
          peg$currPos += 4;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c30) {
            s9 = peg$c30;
            peg$currPos += 8;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse__();
            s11 = peg$parseStringLiteral();
            if (s11 !== peg$FAILED) {
              s9 = [s9, s10, s11];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          peg$savedPos = s3;
          s3 = peg$f38(s4, s8);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c8) {
          s4 = peg$c8;
          peg$currPos += 4;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          s6 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c30) {
            s7 = peg$c30;
            peg$currPos += 8;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseStringLiteral();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          peg$savedPos = s3;
          s3 = peg$f39(s6);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c31) {
            s4 = peg$c31;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            s6 = peg$parseStringLiteral();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f40(s6);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f41(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStringLiteral() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c32;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f43(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseWhitespace();
    if (s1 === peg$FAILED) {
      s1 = peg$parseEOL();
      if (s1 === peg$FAILED) {
        s1 = peg$parseComment();
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEOL();
        if (s1 === peg$FAILED) {
          s1 = peg$parseComment();
        }
      }
    }

    return s0;
  }

  function peg$parseWhitespace() {
    var s0;

    if (peg$r5.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c33;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c34) {
        s0 = peg$c34;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c35;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
